{"id":170097,"name":"Twinkling Stars","description":"I followed the twinkling stars background tutorial. You can find it \u003ca href = \"https://www.script-tutorials.com/demos/360/index.html\"\u003e\u003c/a\u003e\r\n\r\nhttp://www.script-tutorials.com/night-sky-with-twinkling-stars/\r\n\r\nOnly applies to threads\r\n\r\nThe twinkling image opacity has been set to 75% opaque so stars don't completely disappear - if you want to change that, get the original background and set the opacity of the layer in gimp. \r\nAnimation lasts 10 seconds to move 100px,100px.","user":{"id":635667,"name":"xThomas","email":"zitothomas@gmail.com","paypal_email":null,"homepage":null,"about":"i have such a headache right now","license":"publicdomain"},"updated":"2019-03-22T02:51:04.000Z","weekly_install_count":0,"total_install_count":31,"rating":null,"after_screenshot_name":"https://userstyles.org/style_screenshots/170097_after.png?r=1677744014","obsoleting_style_id":null,"obsoleting_style_name":null,"obsolete":0,"admin_delete_reason_id":null,"obsoletion_message":null,"screenshots":null,"license":"publicdomain","created":"2019-03-21T03:05:13.000Z","category":"site","raw_subcategory":"sufficientvelocity","subcategory":"sufficientvelocity","additional_info":"Doesn't work well on: FlexPink, FlexSpace, FlexStars, FlexWhite, Moonscape\r\n\r\nI spent days! days working on this! finally got it down to a reasonable 7-20 cpu core usage! I was running 60s, and at the worst over a hundred, but I finally did it! Now for me to forget promptly half of what I learned.. Well, let's go over the lessons!\r\n\r\nAnimating background-* anything is bad! Especially background-position, causes the browser to spend time painting! Better to use transform instead. \r\nFixed position is awesome. But it will cover anything that doesn't have its own stacking context. So you need to give other elements their own stacking context. Which is what I did to the header. \r\nRemind me to do the same to a few other elements, because I didn't bother messing with the footer or whatever.\r\nz-index only affects things inside its own stacking context. \r\nposition: fixed|relative|absolute will create stacking context. I think.\r\nUse calc() to do math. You can add different kinds of values. I used viewport width + 100px, which is the same size as the twinkling image. \r\nI was recommended not to use background-attachment for efficiency reasons. I did not understand how or why.\r\n\r\nThis is the seventh version of this theme, and the first one that used as little cpu as this.\r\n\r\nI used position:fixed for the twinkling effect on a psuedo element for a few reasons, but one of the big reasons was because I could limit the width and height of the element to that of the viewport. \r\n\r\n\r\nThe animation only uses one keyframe, at 100%, with translate of 100px. I heard that using less keyframes is better, though I didn't really test that. \r\n\r\nThe translation effect. I have a background for the twinkling in :before, gave it width and height of the viewport plus the image size (which is 100px), and i positioned it -100px off the top-left and then translate it 100 pixels to reach 0,0.\r\nIt's important to use pixels in translate(); I was using percentages before and switching to pixels easily halved the cpu load from the css.\r\n\r\nOh, and i made a whole bunch of stuff have transparent backgrounds. That's so you can see the new images! They wouldn't show otherwise.\r\n\r\nThis theme was tested using the FlexGold theme on threads - if you're on other pages without the thread_view class, there's nothing for the css to latch onto. (well, the transparent backgrounds miiiight still take effect) And if you're using different themes, I'm not sure what it will look like, either.\r\n\r\nFailed things\r\nAt one point I tried putting margins and padding on my fixed psuedo element so that it wouldn't overlap the header. Then I realized they came with me even if i scrolled.\r\nThe aforementioned background-position, -attachment, etc. I was getting at best 60% and in worst scenarios 90-110% cpu core usage. Really bad. In hindsight a lot of that was from using percentages instead of pixels in the animation\r\nClouds: I didn't like how they looked, the first thing to go\r\nFixed element positioned in a container. If I remember correctly this is done by sticking a fixed element inside a parent with transformZ(0). For some reason I thought that it would start at the top of the container and end at the bottom, but be fixed in the viewport once you reached it. It did not work this way, alas. (Sticky Positioning is exactly what I just described - and now for the kicker)\r\nSticky positioning: If this had worked, I would have saved a few hours. Nothing I did worked. Either it would have 0x0 dimensions, or (if i gave it display: property) it would push other elements away, or it would cause the page to scroll (The animation would go off screen, and grow the scroll bar with it).","style_tags":[],"css":"@-moz-document domain(\"forums.sufficientvelocity.com\") {\r\n\r\n  /* Create Stacking Context on the header \r\n  Otherwise the animation will cover the header */\r\n  header {\r\n      z-index: 1;\r\n      position: relative;\r\n  }\r\n  footer {\r\n      position: relative;\r\n  }\r\n\r\n  /* Animation */\r\n  .thread_view {\r\n    background: #000 url(http://www.script-tutorials.com/demos/360/images/stars.png) repeat;\r\n  /*   overflow: hidden; */\r\n  }\r\n  .thread_view:before {\r\n    top: -100px;\r\n    left: -100px;\r\n    content: \"\";\r\n    background: transparent url(\"https://i.imgur.com/DNovUwf.png\") repeat;\r\n    position: fixed;\r\n    width: calc(100vw + 100px);\r\n    height: calc(100vh + 100px);\r\n  }\r\n  .thread_view:before {\r\n    animation-name: sideupscroll;\r\n    animation-duration: 10s;\r\n    animation-timing-function: linear;\r\n    animation-iteration-count: infinite;\r\n    animation-fill-mode: both;\r\n  } \r\n  @keyframes sideupscroll {\r\n    100% {\r\n      transform: translateX(100px) translateY(100px);\r\n    }\r\n  }\r\n\r\n  /* relative position stops the psuedo element :before from covering the child content of the parent by creating a stacking context \r\n  at least i assume that's whats happening */\r\n\r\n  .pageWidth .pageContent {\r\n     position:relative;\r\n  }\r\n\r\n  /* ***************************************************************\r\n  *************************** SECTION 2 ****************************\r\n  ***************** APPLIES TO URLS ON THE DOMAIN: *****************\r\n  ********************* SUFFICIENTVELOCITY.COM *********************\r\n  *************************************************************** */\r\n  /* Transparency (Without this you can't see the animation) */\r\n\r\n  #content .pageContent {\r\n      background: transparent;\r\n  }\r\n\r\n  .mainContent {\r\n      background: transparent;\r\n  }\r\n\r\n  .breadBoxTop {\r\n      background: transparent;\r\n  }\r\n\r\n  .messageUserBlock {\r\n      background: transparent;\r\n  }\r\n\r\n  .messageUserBlock .extraUserInfo {\r\n      background: transparent;\r\n  }\r\n\r\n  .messageUserBlock .arrow span {\r\n      border-left-color: black;\r\n  }\r\n\r\n  .message .messageInfo {\r\n      background: transparent;\r\n  }\r\n}","discussions":[],"discussionsCount":0,"commentsCount":0,"isPremium":false,"userjs_url":"/styles/userjs/170097/twinkling-stars.user.js","style_settings":[]}